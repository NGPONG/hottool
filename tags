!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
__CROSSPROCESS_H_	crossprocess.h	2;"	d
__FIND_SYM_ADDR_H__	find_sym_addr.h	2;"	d
__GET_PROCESS_BASE_ADDR__H__	get_process_base_addr.h	2;"	d
__HOOK_H_	hook.h	2;"	d
callstack_len	hook.cpp	/^const int callstack_len = 8 * 1024 * 1024;$/;"	v
close_so	hook.cpp	/^bool close_so(int pid, const std::string &sopath, uint64_t handle)$/;"	f
cross_alloc_string_mem	hook.cpp	/^bool cross_alloc_string_mem(int pid, const std::string &str, void *&targetaddr, int &targetlen)$/;"	f
cross_dlclose	hook.cpp	/^bool cross_dlclose(pid_t pid, const std::string &sopath, uint64_t handle)$/;"	f
cross_dlopen	hook.cpp	/^bool cross_dlopen(pid_t pid, const std::string &sopath, uint64_t &handle)$/;"	f
cross_free_string_mem	hook.cpp	/^bool cross_free_string_mem(int pid, void *targetaddr, int targetlen)$/;"	f
cross_proc_read	crossprocess.cpp	/^int cross_proc_read(pid_t pid, char *remoteaddr, char *localaddr, size_t len)$/;"	f
cross_proc_readmem	crossprocess.cpp	/^static int cross_proc_readmem(pid_t pid, char *remoteaddr, char *localaddr, size_t len)$/;"	f	file:
cross_proc_readptrace	crossprocess.cpp	/^static int cross_proc_readptrace(pid_t pid, char *remoteaddr, char *localaddr, size_t len)$/;"	f	file:
cross_proc_readv	crossprocess.cpp	/^static int cross_proc_readv(pid_t pid, char *remoteaddr, char *localaddr, size_t len)$/;"	f	file:
cross_proc_write	crossprocess.cpp	/^int cross_proc_write(pid_t pid, char *remoteaddr, char *localaddr, size_t len)$/;"	f
cross_proc_writemem	crossprocess.cpp	/^static int cross_proc_writemem(pid_t pid, char *remoteaddr, char *localaddr, size_t len)$/;"	f	file:
cross_proc_writeptrace	crossprocess.cpp	/^static int cross_proc_writeptrace(pid_t pid, char *remoteaddr, char *localaddr, size_t len)$/;"	f	file:
cross_proc_writev	crossprocess.cpp	/^static int cross_proc_writev(pid_t pid, char *remoteaddr, char *localaddr, size_t len)$/;"	f	file:
find_elf_addr	find_sym_addr.cpp	/^bool find_elf_addr(pid_t pid, const char* elfname, const char *perms_prot_flags, unsigned long &start, unsigned long &end)$/;"	f
find_elf_fun_addr_by_file	find_sym_addr.cpp	/^bool find_elf_fun_addr_by_file(int pid, const std::string &elfpath, const std::string &funcname, void *&funcaddr_plt, void *&funcaddr, int elffd)$/;"	f
find_elf_local_sym_addr_by_file	find_sym_addr.cpp	/^bool find_elf_local_sym_addr_by_file(const std::string &elfpath, const std::string &symname, void *&symaddr, int elffd)$/;"	f
find_elf_variable_addr_by_file	find_sym_addr.cpp	/^bool find_elf_variable_addr_by_file(int pid, const std::string &elfpath, const std::string &variablename, void *&variableaddr_got, void *&variableaddr, int elffd)$/;"	f
find_so_func_addr_by_file	find_sym_addr.cpp	/^bool find_so_func_addr_by_file(int pid, const std::string &sopath, const std::string &funname, void *&funcaddr_plt, void *&funcaddr, int sofd)$/;"	f
find_so_func_addr_by_mem	find_sym_addr.cpp	/^bool find_so_func_addr_by_mem(int pid, const std::string &soname, const std::string &funname, void *&funcaddr_plt, void *&funcaddr)$/;"	f
find_so_variable_addr_by_file	find_sym_addr.cpp	/^bool find_so_variable_addr_by_file(int pid, const std::string &sopath, const std::string &variablename, void *&variableaddr_got, void *&variableaddr, int sofd)$/;"	f
find_so_variable_addr_by_mem	find_sym_addr.cpp	/^bool find_so_variable_addr_by_mem(int pid, const std::string &soname, const std::string &variablename, void *&variableaddr_got, void *&variableaddr)$/;"	f
fini_hook_env	hook.cpp	/^bool fini_hook_env(int pid)$/;"	f
funcall_fun	hook.cpp	/^bool funcall_fun(int pid, uint64_t &retval, void *funcaddr, uint64_t arg1 = 0, uint64_t arg2 = 0, uint64_t arg3 = 0, uint64_t arg4 = 0, uint64_t arg5 = 0, uint64_t arg6 = 0)$/;"	f
gallocmem	hook.cpp	/^std::map<uint64_t, int> gallocmem;$/;"	v
gbackupcode	hook.cpp	/^uint64_t gbackupcode = 0;$/;"	v
get_elf_data_base_addr	get_process_base_addr.h	/^bool get_elf_data_base_addr(const char* findname, unsigned long &start)$/;"	f
get_elf_text_base_addr	get_process_base_addr.h	/^bool get_elf_text_base_addr(const char* findname, unsigned long &start)$/;"	f
global_i	main.cpp	/^int global_i = 0;$/;"	v
global_i1	main.cpp	/^int global_i1 = 10;$/;"	v
gpcalladdr	hook.cpp	/^char *gpcalladdr = NULL;$/;"	v
gpcallstack	hook.cpp	/^char *gpcallstack = 0;$/;"	v
hotfix_func	hook.cpp	/^bool hotfix_func(pid_t pid, void *old_funcaddr, void *new_funcaddr, uint64_t &backupcode)$/;"	f
hotfix_func64	hook.cpp	/^bool hotfix_func64(pid_t pid, void *old_funcaddr, void *new_funcaddr, char *backupcode, int len)$/;"	f
hotfix_gotplt	hook.cpp	/^bool hotfix_gotplt(pid_t pid, void *gotplt, void *new_funcaddr, uint64_t &backupcode)$/;"	f
hottool_find	main.cpp	/^int hottool_find(pid_t pid, int argc, char *argv[], void *&got_plt, void *&addr)$/;"	f
hottool_hotfix	main.cpp	/^int hottool_hotfix(pid_t pid, int argc, char *argv[], void *&back_got_plt, void *&back_addr)$/;"	f
init_hook_env	hook.cpp	/^bool init_hook_env(pid_t pid)$/;"	f
inject_so	hook.cpp	/^bool inject_so(int pid, const std::string &sopath, uint64_t &handle)$/;"	f
libcprefix	hook.cpp	/^const char *libcprefix = "libc-";$/;"	v
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
static_i	main.cpp	/^static int static_i = 0;$/;"	v	file:
static_i1	main.cpp	/^static int static_i1 = 10;$/;"	v	file:
syscall_fun	hook.cpp	/^int syscall_fun(pid_t pid, uint64_t &retval, uint64_t syscallno, uint64_t arg1 = 0, uint64_t arg2 = 0, uint64_t arg3 = 0, uint64_t arg4 = 0, uint64_t arg5 = 0, uint64_t arg6 = 0)$/;"	f
syscall_sys_mmap	hook.cpp	/^const int syscall_sys_mmap = 9;$/;"	v
syscall_sys_mprotect	hook.cpp	/^const int syscall_sys_mprotect = 10;$/;"	v
syscall_sys_munmap	hook.cpp	/^const int syscall_sys_munmap = 11;$/;"	v
usage	main.cpp	/^void usage()$/;"	f
